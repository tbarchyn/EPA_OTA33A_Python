Differences/Issues with the Matlab/Python code:


Number of bins
	[MATLAB]
	the initial array of bins "deg" includes bin edges
	the binning algorithm loops through this deg array and attempts to use an out-of range index value for binning. Does matlab not produce an error here? Other langages do.
	
	[PYTHON]
	the initial array of bins "bins" includes bin edges
	a subsequent array of bin centers "mid_bins" has a length of len(bins)-1
	This mid_bins array solves the out-of range index problem. 
	The centering algorithm means that there is no net effect on the data.
	
Filtering for low bin density
	[MATLAB]
	if the number of data points in a given bin is below a threshold "cut", the data is set to the minimum measured concentration "min(res)". Since we already went to the effort of calculating a baseline "lowmet" and subtracting it, this should be set to 0 instead.
	
	[PYTHON]
	The cutoff procedure is slightly different here. If density is high enough, then the data is kept. This means that areas default data is set to 0.
	
Masking
	[PYTHON]
	there are 2 places where data masks are calculated: the wind speed mask, early on, and the wind direction mask, later.
	The wind speed mask gets overwritten with the wind direction mask. 
	
Pressure units

	Standard Pressure = 1013.25 mBar = 101.325 Bar = 101.325 kPa =  760 Torr = 1 atm

	[MATLAB]
	In the Matlab code, the pressure unit is marked as mBar in the code.
	In the associated tables, the column is (mis)marked as Bar.
	in fact, in the OTM 33A test method document, sample data shows pressures of 759.7 at a temp of 21.3 C; much closer to true STP if pressure is expressed in Torr. 
	
	***Are we sure the measured pressure in STR_3061611_01.xls is not in Torr?***** 
	
	the standard pressure used in the code is 1013.25 mBar or 101.325 kPa
	The gas constant used in the code is 8.31415 m3 Pa K-1 mol-1
	
	there are a number of parameters containing temperature/pressure ratios or vice versa:
		rt0rp0 = RT/P = 8.314159 * 298 / 101.325 (m3 bar K-1 mol-1 K kPa) 
		rt1rp1 =  T/P = 298 / 1013.25 (K/mBar)
		rt2rp2 =  P/T = [ mean P/ mean T ; another meanP/meanT; ...] (mBar/K)
		rt3rp3 =  P/T = this mean P / this mean T     (mBar/K)
		opt = 1e-6 * mw * 1000 / rt0rp0  [g m-3 ppm-1]  ** this constant turns a ppm mixing ratio into g/mol
		
	The pressure conversion to STP is done assuming that the data is in mBar via the formula
	conversion factor = rt1rp1*rt2rp2 = Tstd/Pstd * Pmeas/Tmeas
			since: 
			Pmeas * Vmeas/Tmeas = Pstd*Vstd/Tstd 
			Vstd = Vmeas * Pmeas/Tmeas * Tstd/Pstd
	

	
	[PYTHON]
	The gas constant used is 0.08205746 // universal gas constant [L atm K-1 mol-1] 
	CORRECTED *** small correction: should be: 0.08205746  ****
	The standard pressure used is 1 atm
	the pressure unit of the data is marked as Pa in the code. This comment is wrong. it is treated as atm throughout.
	the pressure unit of the data is marked as Bar in the csv file.

	the following conversion is used to turn ppm into g m-3:
		conc_ppm * mw / (1e6*R*T/(P*1000))
		this is correct if the P is in atm. the factor of 1000 is conversion of m3 to L.
		
	A conversion (data/1000) is done upon loading measured pressure data. no other pressure unit conversions are done.
	This factor is wrong. It and should be 760 if the data is in Torr (1013.25 if the data is in mBar)
	CORRECTED *** to 1013.25 ***
	I still believe this factor should be 760 for the data in the STR_3061611_01.xls test file.
	
Accepted angle 
	[PYTHON]
	The masking of wd3, ws3, ws3z, temp, and press for angle is done after ws3 has been used to bin concentration. Concentration is also not masked at all. This step should happen earlier. It is not possible to apply this angle filter/mask without doing the binning process twice, unfortunately. 

	
	[MATLAB]
	The masking for wind angle is actually a density filter using the bin density of 2%. It is done in the pre-processing step. This pre-processing, particularly in creating a full concentration bin with default bin sizes of 10 degrees, seems unnecessary and slow. I think the reason for this pre-binning is to allow for an initial user-entered wind angle filtering.
	
	There is another user-entered parameter for wind angle filtering. It is called "al", not to be confused with the peak concentration, called "a1". This is also applied in the pre-processing step. 
	
	
Sonic Correction
	[PYTHON] [MATLAB]
	both programs treat this correction in the same way. However, the limitation that data be in the southern quadrant is not necessary for the method. 
	1) the use of atan instead of atan2 in the calculation of RA and RB angles. 
	2) the calculation of the rotated direction is routinely done with the formula
		180 + atan2(-y, -x)*pi/2
	Standard rotation formulas stipulate using
		90 - atan2(y, x)*pi/2 + 90 
	
	the calculated wd for this method is centered at 0 for the file STR_3061611_11.xls. This is not what we want. 
	
	See associated word document showing issues and solutions. 
	
Stability Class Determination
	[MATLAB]
	There is extra code present that does not end up being used. Only the 2d anemometer wind speed + the 3d anemometer turbulent intensity are used to determine wind speed
	
	[PYTHON]
	Instead of using the 2d anemometer data, the 3d anemometer data is used for the 2d wind speed. 
	
